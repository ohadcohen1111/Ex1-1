package Ex1;

import java.util.ArrayList;

public class ComplexFunction implements complex_function {
	private Operation op;
	private function left, right;

	public ComplexFunction(Operation op, function left, function right) {
		this.op = op;
		this.left = left;
		this.right = right;
	}

	public ComplexFunction(String op, function left, function right) {
		this.left = left;
		this.right = right;
		String opString = op.toLowerCase();
		switch (opString) {
		case "plus":
			this.op = Operation.Plus;
			break;
		case "mul":
			this.op = Operation.Times;
			break;
		case "times":
			this.op = Operation.Times;
			break;
		case "div":
			this.op = Operation.Divid;
			break;
		case "min":
			this.op = Operation.Min;
			break;
		case "max":
			this.op = Operation.Max;
			break;
		case "com":
			this.op = Operation.Comp;
			break;
		case "none":
			this.op = Operation.None;
			break;
		case "error":
			this.op = Operation.Error;
			break;
		default:
			System.out.println("Invalid input");
			break;
		}
	}

	public ComplexFunction(function left) {
		this.op = Operation.None;
		this.left = left;
		this.right = null;
	}

	public ComplexFunction() {
		this.op = null;
		this.left = null;
		this.right = null;
	}

	public function initFromString(String s) {
		if (!s.contains(",")) {
			return new Polynom(s);
		}
		int index = 1;
		int i = s.indexOf("(") + 1;
		for (; i < s.length(); i++) {
			if (s.charAt(i) == '(') {
				index++;
			}
			if (s.charAt(i) == ',') {
				index--;
			}
			if (index == 0) {
				break;
			}
		}
		function left = initFromString(s.substring(s.indexOf("(") + 1, i));
		function right = initFromString(s.substring(i + 1, s.lastIndexOf(")")));
		function cf = new ComplexFunction(s.substring(0, s.indexOf("(")), left, right);
		return cf;
	}

	public double f(double x) {
		double sum = 0;
		if (this.op == Operation.Plus) {
			sum += this.left.f(x) + this.right.f(x);
		}
		if (this.op == Operation.Min) {
			sum += Math.min(this.left.f(x), this.right.f(x));
		}
		if (this.op == Operation.Max) {
			sum += Math.max(this.left.f(x), this.right.f(x));
		}
		if (this.op == Operation.Times) {
			sum += this.left.f(x) * this.right.f(x);
		}
		if (this.op == Operation.Divid) {
			sum += this.left.f(x) / this.right.f(x);
		}
		return sum;
	}

	/**
	 * return a String representing this complex function
	 */
	public String toString() {
		String ans = "";
		ans += this.op + "(" + this.left + "," + this.right + ")";
		return ans;
	}

	public function copy() {
		String s = this.toString();
		function copy = new ComplexFunction();
		copy.initFromString(s);
		return copy;
	}

	public boolean equals(Object obj) {
		double arr[] = { -3, -1, 0, 1, 2, 4.2, 3.2, 7, 4, 10, 1.4 };
		function f = initFromString(obj.toString());
		for (int i = 0; i < arr.length; i++) {
			double x = arr[i];
			if (this.f(x) != f.f(x)) {
				return false;
			}
		}
		return true;
	}

	/**
	 * Add to this complex_function the f1 complex_function
	 * 
	 * @param f1 the complex_function which will be added to this complex_function.
	 */
	public void plus(function f1) {
		this.left = this;
		this.op = Operation.Plus;
		this.right = f1;
	}

	/**
	 * Multiply this complex_function with the f1 complex_function
	 * 
	 * @param f1 the complex_function which will be multiply be this
	 *           complex_function.
	 */
	public void mul(function f1) {
		this.left = this;
		this.op = Operation.Times;
		this.right = f1;
	}

	/**
	 * Divides this complex_function with the f1 complex_function
	 * 
	 * @param f1 the complex_function which will be divid this complex_function.
	 */
	public void div(function f1) {
		this.left = this;
		this.op = Operation.Divid;
		this.right = f1;
	}

	/**
	 * Computes the maximum over this complex_function and the f1 complex_function
	 * 
	 * @param f1 the complex_function which will be compared with this
	 *           complex_function - to compute the maximum.
	 */
	public void max(function f1) {
		this.left = this;
		this.op = Operation.Max;
		this.right = f1;
	}

	/**
	 * Computes the minimum over this complex_function and the f1 complex_function
	 * 
	 * @param f1 the complex_function which will be compared with this
	 *           complex_function - to compute the minimum.
	 */
	public void min(function f1) {
		this.left = this;
		this.op = Operation.Min;
		this.right = f1;
	}

	/**
	 * This method wrap the f1 complex_function with this function: this.f(f1(x))
	 * 
	 * @param f1 complex function
	 */
	public void comp(function f1) {
		this.left = this;
		this.op = Operation.Comp;
		this.right = f1;
	}

	/**
	 * returns the left side of the complex function - this side should always
	 * exists (should NOT be null).
	 * 
	 * @return a function representing the left side of this complex funcation
	 */
	public function left() {
		return this.left;
	}

	/**
	 * returns the right side of the complex function - this side might not exists
	 * (aka equals null).
	 * 
	 * @return a function representing the left side of this complex funcation
	 */
	public function right() {
		return this.right;
	}

	/**
	 * The complex_function oparation: plus, mul, div, max, min, comp
	 * 
	 * @return
	 */
	public Operation getOp() {
		return this.op;
	}
}
